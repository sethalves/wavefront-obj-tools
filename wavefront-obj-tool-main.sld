(define-library (wavefront-obj-tool-main)
  (export main-program)
  (import (scheme base)
          (scheme file)
          (scheme write)
          (scheme process-context)
          (foldling command-line)
          (seth strings)
          (seth math-3d)
          (seth model-3d)
          (seth obj-model)
          (seth stl-model)
          )

  (begin

    (define (main-program)
      (define (usage why)
        (display why)
        (newline)
        (display (car (command-line)))
        (display " [args] input-file.obj ...\n")
        (display "  -s scale-factor           scale points by factor\n")
        (display "  -d max-dimension          scale model to max-dimension\n")
        (display "  -c                        reuse coincident points\n")
        (display "  -n                        flip faces so outsides face as normals\n")
        (display "  -p                        print information about model\n")
        (display "  -m scale                  set some texture coordinates\n")
        (display "  -t x y z                  translate model by an offset\n")
        (display "  -L material-lib-filename  include the named material library\n")
        (display "  -S material-name          set all faces in the model to a named material\n")
        (display "  -o output-filename        instead of stdout\n")
        (exit 1))

      (let* ((args (parse-command-line
                    `(((-s -d -m) ,string->number)
                      (-L lib-name)
                      (-S material-name)
                      (-o output-file)
                      ((-c -n -p))
                      (-t x y z)
                      (-?) (-h))))
             (scale #f)
             (dimension #f)
             (input-files '())
             (output-file #f)
             (compact-points #f)
             (texture-coords-scale #f)
             (translate-by #f)
             (do-fix-face-winding #f)
             (print-info #f)
             (output-port (current-output-port))
             (material-libraries '())
             (set-all-to-material #f))

        (for-each
         (lambda (arg)
           (case (car arg)
             ((-? -h) (usage ""))
             ((-s)
              (if scale (usage "give -s only once"))
              (set! scale (cadr arg)))
             ((-d)
              (if dimension (usage "give -d only once"))
              (set! dimension (cadr arg)))
             ((-o)
              (if output-file (usage "give -o only once"))
              (set! output-file (cadr arg)))
             ((-c)
              (if compact-points (usage "give -c only once"))
              (set! compact-points #t))
             ((-m)
              (if texture-coords-scale (usage "give -m only once"))
              (set! texture-coords-scale (cadr arg)))
             ((-p)
              (if print-info (usage "give -p only once"))
              (set! print-info #t))
             ((-n)
              (if do-fix-face-winding (usage "give -n only once"))
              (set! do-fix-face-winding #t))
             ((-t)
              (if translate-by (usage "give -t only once"))
              (set! translate-by (list->vector (map string->number (cdr arg)))))
             ((-L)
              (set! material-libraries (cons (cadr arg) material-libraries)))
             ((-S)
              (if set-all-to-material (usage "give -S only once"))
              (set! set-all-to-material (cadr arg)))
             ((--)
              (set! input-files (cdr arg)))))
         args)

        (if (and scale dimension) (usage "don't use both -s and -d"))
        (if (null? input-files) (usage "give at least one input filename"))
        (if output-file
            (set! output-port (open-output-file output-file)))

        (let ((model (make-empty-model)))
          (let loop ((input-files input-files))
            (cond ((null? input-files)
                   (if compact-points (compact-obj-model model))
                   (if do-fix-face-winding (fix-face-winding model))
                   (if translate-by (translate-model model translate-by))
                   (cond (scale (scale-model model scale))
                         (dimension (size-model model dimension)))
                   (if texture-coords-scale
                       (add-simple-texture-coordinates model texture-coords-scale))

                   (if set-all-to-material
                       (set-all-faces-to-material model set-all-to-material))

                   (cond ((not (null? material-libraries))
                          (clear-material-libraries model)
                          (add-material-libraries model material-libraries)))

                   (if (or output-file (not print-info))
                       (write-obj-model model output-port))
                   (if output-file (close-output-port output-port)))

                  ((string-ends-with? (car input-files) ".stl")
                   (read-stl-model-file (car input-files) model)
                   (loop (cdr input-files)))

                  (else
                   (read-obj-model-file (car input-files) model)
                   (loop (cdr input-files)))))

          (cond (print-info
                 (let ((aa-box (model-aa-box model))
                       (texture-aa-box (model-texture-aa-box model)))

                   (display "aa-box: " (current-error-port))
                   (write `(,(aa-box-low-corner aa-box)
                            ,(aa-box-high-corner aa-box)) (current-error-port))
                   (newline (current-error-port))

                   (display "texture-aa-box: " (current-error-port))
                   (if texture-aa-box
                       (write `(,(aa-box-low-corner texture-aa-box)
                                ,(aa-box-high-corner texture-aa-box))
                              (current-error-port))
                       (write #f (current-error-port)))
                   (newline (current-error-port))

                   (display "dimensions: " (current-error-port))
                   (write `(,(model-dimensions model)) (current-error-port))
                   (newline (current-error-port))
                   ))))
        ))))
