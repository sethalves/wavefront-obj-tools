(define-library (wavefront-obj-tool-main)
  (export main-program)
  (import (scheme base)
          (scheme file)
          (scheme write)
          (scheme process-context)
          (foldling command-line)
          (seth strings)
          (seth math-3d)
          (seth model-3d)
          (seth obj-model)
          (seth stl-model)
          (seth scad-model)
          (seth cout)
          )

  (begin

    (define (main-program)
      (define (usage why)
        (display why)
        (newline)
        (display (car (command-line)))
        (display " [args] input-file.obj ...\n")
        (display "  -s scale-factor           scale points by factor\n")
        (display "  -d max-dimension          scale model to max-dimension\n")
        (display "  --hull                    output convex hull\n")
        (display "  -c                        reuse coincident points\n")
        (display "  -C threshold              combine near points\n")
        (display "  -n                        flip faces so outsides face as normals\n")
        (display "  -p                        print information about model\n")
        (display "  --px                      print x-dimension of model\n")
        (display "  --py                      print y-dimension of model\n")
        (display "  --pz                      print z-dimension of model\n")
        (display "  -m scale                  set some texture coordinates\n")
        (display "  -M x z                    map a single y-normal texture (use -S also)\n")
        (display "  -U                        set up-facing faces to a material (use -S also)\n")
        (display "  -T                        set material of upper surface (use -S also)\n")
        (display "  -t x y z                  translate model by an offset\n")
        (display "  -L material-lib-filename  include the named material library\n")
        (display "  -S material-name          set faces in the model to a named material\n")
        (display "  -o output-filename        instead of stdout\n")
        (exit 1))

      (let* ((args (parse-command-line
                    `(((-s -d -m -C) ,string->number)
                      (-L lib-name)
                      (-S material-name)
                      (-o output-file)
                      ((-c -n -p --px --py --pz -U -T --hull))
                      (-t x y z)
                      (-M x z)
                      (-?) (-h))))
             (scale #f)
             (dimension #f)
             (input-files '())
             (output-file #f)
             (compact-points #f)
             (convex-hull #f)
             (combine-points-threshold #f)
             (texture-coords-scale #f)
             (set-upward-faces-material #f)
             (set-upper-surface-material #f)
             (texture-map-scale #f)
             (translate-by #f)
             (do-fix-face-winding #f)
             (print-info #f)
             (print-x-size #f)
             (print-y-size #f)
             (print-z-size #f)
             (output-port (current-output-port))
             (output-type 'obj)
             (material-libraries '())
             (material-to-set #f))

        (for-each
         (lambda (arg)
           (case (car arg)
             ((-? -h) (usage ""))
             ((-s)
              (if scale (usage "give -s only once"))
              (set! scale (cadr arg)))
             ((-d)
              (if dimension (usage "give -d only once"))
              (set! dimension (cadr arg)))
             ((-o)
              (if output-file (usage "give -o only once"))
              (set! output-file (cadr arg)))
             ((-c)
              (if compact-points (usage "give -c only once"))
              (set! compact-points #t))
             ((--hull)
              (if convex-hull (usage "give --hull only once"))
              (set! convex-hull #t))
             ((-C)
              (if combine-points-threshold (usage "give -m only once"))
              (set! combine-points-threshold (cadr arg)))
             ((-m)
              (if texture-coords-scale (usage "give -m only once"))
              (set! texture-coords-scale (cadr arg)))
             ((-M)
              (if texture-map-scale (usage "give -M only once"))
              (set! texture-map-scale (list->vector (map string->number (cdr arg)))))
             ((-p)
              (if print-info (usage "give -p only once"))
              (set! print-info #t))
             ((--px)
              (if print-x-size (usage "give --px only once"))
              (set! print-x-size #t))
             ((--py)
              (if print-y-size (usage "give --py only once"))
              (set! print-y-size #t))
             ((--pz)
              (if print-y-size (usage "give --pz only once"))
              (set! print-z-size #t))
             ((-n)
              (if do-fix-face-winding (usage "give -n only once"))
              (set! do-fix-face-winding #t))
             ((-t)
              (if translate-by (usage "give -t only once"))
              (set! translate-by (list->vector (map string->number (cdr arg)))))
             ((-L)
              (set! material-libraries (cons (cadr arg) material-libraries)))
             ((-S)
              (if material-to-set (usage "give -S only once"))
              (set! material-to-set (cadr arg)))
             ((-U)
              (if set-upward-faces-material (usage "give -U only once"))
              (if set-upper-surface-material (usage "give only one of -U or -T"))
              (set! set-upward-faces-material #t))
             ((-T)
              (if set-upper-surface-material (usage "give -T only once"))
              (if set-upward-faces-material (usage "give only one of -U or -T"))
              (set! set-upper-surface-material #t))
             ((--)
              (set! input-files (cdr arg)))))
         args)

        (if (and scale dimension) (usage "don't use both -s and -d"))
        (if (null? input-files) (usage "give at least one input filename"))
        (cond (output-file
               (set! output-port (open-output-file output-file))
               (cond ((string-ends-with? output-file ".stl")
                      (set! output-type 'stl))
                     ((string-ends-with? output-file ".scad")
                      (set! output-type 'scad)))))

        (let* ((model (make-empty-model))
               (material (if material-to-set
                             (make-material material-to-set)
                             (make-material "default"))))
          (let loop ((input-files input-files))
            (cond ((null? input-files)
                   (cond (convex-hull
                          (compact-obj-model model)
                          (set! model (model->convex-hull model))))
                   (let* ((aa-box (model-aa-box model))
                          (octree (model->octree model aa-box))
                          (face-filter
                           (cond (set-upward-faces-material
                                  (lambda (model mesh face)
                                    (let ((normal (face->average-normal model face)))
                                      (> (vector3-y normal) 0.5))))
                                 (set-upper-surface-material
                                  (lambda (model mesh face)
                                    (let* ((face-center (face->center-vertex model face))
                                           (ray0 (vector (vector3-x face-center)
                                                         (vector3-y (aa-box-high-corner aa-box))
                                                         (vector3-z face-center)))
                                           (ray1 (vector (vector3-x face-center)
                                                         (vector3-y (aa-box-low-corner aa-box))
                                                         (vector3-z face-center)))
                                           (center-pick (ray-cast model octree (vector ray0 ray1))))

                                      (eq? center-pick face))))
                                 (else
                                  (lambda (model mesh face) #t)))))
                     (if combine-points-threshold (combine-near-points model combine-points-threshold))
                     (if compact-points (compact-obj-model model))
                     (if do-fix-face-winding (fix-face-winding model))
                     (if translate-by (translate-model model translate-by))
                     (cond (scale (scale-model model scale))
                           (dimension (size-model model dimension)))

                     (cond (texture-coords-scale
                            (add-simple-texture-coordinates model
                                                            (vector texture-coords-scale texture-coords-scale)
                                                            material face-filter))
                           (texture-map-scale
                            (add-top-texture-coordinates model texture-map-scale material face-filter))
                           (material-to-set
                            (set-all-faces-to-material model material-to-set face-filter)))

                     (cond ((not (null? material-libraries))
                            (clear-material-libraries model)
                            (add-material-libraries model material-libraries)))

                     (if (or output-file (and (not print-info)
                                              (not print-x-size)
                                              (not print-y-size)
                                              (not print-z-size)))
                         (cond ((eq? output-type 'stl)
                                (write-stl-model model output-port))
                               ((eq? output-type 'scad)
                                (write-scad-file (list (model->scad-polyhedron model)) output-port))
                               (else
                                (write-obj-model model output-port))))
                     (if output-file (close-output-port output-port))))

                  ((string-ends-with? (car input-files) ".stl")
                   (read-stl-model-file (car input-files) model)
                   (loop (cdr input-files)))

                  (else
                   (read-obj-model-file (car input-files) model)
                   (loop (cdr input-files)))))

          (cond (print-info
                 (let ((aa-box (model-aa-box model))
                       (texture-aa-box (model-texture-aa-box model)))

                   (display "aa-box: " (current-error-port))
                   (write `(,(aa-box-low-corner aa-box)
                            ,(aa-box-high-corner aa-box)) (current-error-port))
                   (newline (current-error-port))

                   (display "texture-aa-box: " (current-error-port))
                   (if texture-aa-box
                       (write `(,(aa-box-low-corner texture-aa-box)
                                ,(aa-box-high-corner texture-aa-box))
                              (current-error-port))
                       (write #f (current-error-port)))
                   (newline (current-error-port))

                   (display "dimensions: " (current-error-port))
                   (write `(,(model-dimensions model)) (current-error-port))
                   (newline (current-error-port))

                   (cout "materials: " (model-material-libraries model) "\n")
                   (cout "vertices: " (vector-length (coordinates-as-vector (model-vertices model))) "\n")
                   (cout "meshes: " (length (model-meshes model)) "\n")


                   )))

          (let ((size-printer
                 (lambda (dim-getter)
                   (let ((aa-box (model-aa-box model)))
                     (display (dim-getter
                               (vector3-diff (aa-box-high-corner aa-box)
                                             (aa-box-low-corner aa-box))))
                     (newline)))))
            (cond (print-x-size (size-printer vector3-x)))
            (cond (print-y-size (size-printer vector3-y)))
            (cond (print-z-size (size-printer vector3-z))))

          )))))
